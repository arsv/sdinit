#!/bin/sh

# This script is indended to provide GNU autoconf compatible behavior.
# Do not rely too much on it. If unsure, go edit Makefile and/or config.h

# Unlike actualy autoconf scripts, this script does not test anything.
# Testing makes little sense for a small, very linux-specific tool
# like sninit which has no way of handling unusual evironments.

unset target diet cc
unset cctype libc 
unset libs libs_syscall
unset tstype null

lto=
optimize=-Os
debug=
builtin=
hostcc=gcc

unset prefix sbindir mandir man5dir man8dir logdir sysconfdir
unset initctl inittab runcap s cgdir blocks

die() { echo "$@"; exit 1; }
dieifnot() { test -n "$1" && return; shift; die "$@"; }
argreq() { dieifnot "$val" "$arg: value must be supplied"; }

while [ $# -gt 0 ]; do
	arg="$1"; shift;
	# Separate LHS and RHS in --option=value or VAR=val cases
	case "$arg" in
		*=*)
			val=`echo "$arg" | sed -e 's/^[^=]*=//'`
			arg=`echo "$arg" | sed -e 's/=.*//'`
			;;
		*)
			val="" ;;
	esac

	# Now the arguments. We're aiming at being moderately autoconf-compatible,
	# so "--with-dietlibc" is allowed along with much more logical "dietlibc"
	# There will be some "extra" options like "with-dietlibc" but that's ok.
	#
	# Different name to produce correct error messages,
	# i.e. --foo not foo where --foo was used.

	arq=`echo "$arg" | sed -e 's/^--//'`

	case "$arq" in
		sysconfdir|configdir) sysconfdir=$val ;;
		sbindir) sbindir=$val ;;
		logdir) logdir=$val ;;
		mandir) mandir=$val ;;
		man5dir) mandir=$val ;;
		man8dir) mandir=$val ;;
		prefix) prefix=$val ;;
		cgdir) cgdir=$val ;;

		program-prefix) s=$val ;;
		with-s|s) s=s ;;
		with-sn|sn) s=sn ;;

		initctl) argreq
			initctl=$val
			;;
		inittab) argreq
			inittab=$val
			;;
		initdir) argreq
			initdir=$val
			;;
		builtin|with-builtin) argreq
			builtin="$val"
			;;
		target|host) argreq
			target=$val
			cross=$target-
			;;
		build) argreq
			build=$val
			hostcc=$val-gcc
			;;
		with-cc|cc) argreq
			cc=${val:-cc}
			cctype=gcc
			;;
		with-clang|clang)
			cc=${val:-clang}
			cctype=clang
			;;
		arch|bundled|with-bundled|with-bundled-libc) argreq
			libc=bundled
			arch="$val"
			;;
		with-musl|musl)
			cctype=musl
			;;
		with-dietlibc|dietlibc) argreq
			diet=${val:-diet}
			libc=dietlibc
			;;
		with-dietlibc-fixed|dietlibc-fixed)
			# fixed = with ppoll(2) support
			diet=${val:-diet}
			libc=dietlibc-fixed
			;;
		with-libc|libc)
			libc=${val:-syslibc}
			;;
		with-syslibc|with-glibc|syslibc|glibc|libc)
			libc=syslibc
			;;
		with-timestamps|ts) argreq
			tstype=$val
			;;
		tz|notz|libcts|nots)
			tstype=$arq
			;;
		disable-inittab|no-inittab)
			inittab=-
			;;
		disable-initdir|no-initdir)
			initdir=-
			;;
		enable-debug|debug)
			debug=${val:-"-Wall -g"}
			;;
		enable-lto|lto)
			lto=${val:-"-flto"}
			;;
		disable-optimization|no-O)
			optimize=
			lto=
			;;
		with-optimization|O|optimize)
			optimize=${val:-$optimize}
			;;
		devel)
			s=
			inittab=etc/inittab
			initdir=etc/initdir
			optimize=
			debug="-Wall -g"
			;;
		*)
			die "Unknown option $arg"
			;;
	esac
done

# Could be done in the loop above, if not for option order issues.
# i.e. --with-clang --with-dietlibc vs --with-dietlibc --with-clang

if [ -n "$optimize" ]; then
	cflags=${cflags:+$cflags }$optimize
fi
if [ -n "$lto" ]; then
	cflags=${cflags:+$cflags }$lto
	ldflags=${ldflags:+$ldflags }$lto
fi
if [ -n "$debug" ]; then
	cflags=${cflags:+$cflags }$debug
fi

test "$target" = "$build" || HOSTCC=${HOSTCC:-$hostcc}

case "${cctype:-gcc}" in
	# gcc handles target with prefixed executables, like arm-linux-eabi-gcc
	gcc)	CC=${cc:-${cross}gcc} ;;
	cc)	CC=${cc:-${cross}cc} ;;
	# clang makes no difference between native and cross-compilation, and only needs
	# an option to select desired arch.
	clang)
		CC=${cc:-clang}
		[ -n "$target" ] && cflags="-arch $target $cflags"
		;;
	# Unlike dietlibc, musl replaces compiler.
	# No idea how they handle cross-builds, perhaps with different musl-executables?
	musl)
		CC=${cc:-musl-gcc}
		[ -n "$target" ] && die -e "Can't use --host/--target with musl\n"\
			"Use --with-musl=ARCH-musl-gcc or something similar instead."
		;;
esac

# Check if we're trying to build x86 on an x86_64 host
# It's a blind test but that's ok since unrecognized option
# message is not likely to start with x86_64
#
# XXX: it's a dirty hack that should be done differently
if [ "$arch" == "x86" -a -z "$target" -a -z "$cc" ]; then
	ccarch=`$CC -dumpmachine 2>/dev/null`
	case "$ccarch" in
		x86_64*)
			CC="$CC -m32 -march=i686"
			test -z "$HOSTCC" && HOSTCC="$hostcc"
			;;
	esac
elif [ "$arch" == "x86_32" -a -z "$target" -a -z "$cc" ]; then
	CC="$CC -mx32"
	test -z "$HOSTCC" && HOSTCC="$hostcc"
fi

if [ "$inittab" != "-" ]; then
	blocks="conf"
else
	blocks="null"
fi

case "${libc:-syslibc}" in
	bundled)
		dieifnot "$arch" "Target architecture must be specified for bundled libc (--arch)"
		test -d "libc/$arch" || die "bundled libc: target $arch is not supported"
		blocks="$blocks sys"
		tsdefault=tz
		;;
	musl)
		tsdefault=libc
		;;
	syslibc)
		blocks="$blocks dents"
		tsdefault=libc
		;;
	dietlibc-fixed)
		CC="$diet $CC"
		blocks="$blocks sys"
		tsdefault=tz
		;;
	dietlibc)
		CC="$diet $CC"
		libs=-lcompat
		blocks="$blocks sys ppoll"
		tsdefault=tz
		;;
	*)
		die "Unknown libc type $libc"
		;;
esac

case "${tstype:-$tsdefault}" in
	libc)
		blocks="$blocks libcts"
		;;
	null)
		blocks="$blocks nots"
		;;
	tz)
		blocks="$blocks tz"
		;;
	notz|utc)
		blocks="$blocks notz"
		;;
esac

# Allow complete overwriting for these variables
CFLAGS=${CFLAGS:-$cflags}
LDFLAGS=${LDFLAGS:-$ldflags}
LIBS=${LIBS:-$libs}

# Default values for directory options, defined late because of $prefix dependency
subprefix=${prefix:-/usr}
prefix=${prefix:-/}
test "$prefix" = '/' && prefix=''
mandir=${mandir:-$subprefix/share/man}
man5dir=${man5dir:-$mandir/man5}
man8dir=${man8dir:-$mandir/man8}
sbindir=${sbindir:-$prefix/sbin}
logdir=${logdir:-$prefix/var/log}
cgdir=${cgdir:-/sys/fs/cgroup}
sysconfdir=${sysconfdir:-$prefix/etc}
initctl=${initctl:-@initctl}
test "$inittab" != '-' && inittab=${inittab:-$sysconfdir/inittab} || unset inittab
test "$initdir" != '-' && initdir=${initdir:-$sysconfdir/rc}      || unset initdir

sed -i \
	-e "/^ARCH :=/s#:=.*#:= $arch#"\
	-e "/^CC :=/s#:=.*#:= $CC#"\
	-e "/^CFLAGS :=/s#:=.*#:= $CFLAGS#"\
	-e "/^LDFLAGS :=/s#:=.*#:= $LDFLAGS#"\
	-e "/^LIBS :=/s#:=.*#:= $LIBS#"\
	-e "/^builtin :=/s#:=.*#:= $builtin#"\
	-e "/^HOSTCC :=/s#:=.*#:= $HOSTCC#"\
	-e "/^s :=/s#:=.*#:= $s#"\
	-e "/^initblocks :=/s#:=.*#:= $blocks#"\
	config.mk

unset nt; test -z "$inittab" && nt="//"
unset nd; test -z "$initdir" && nd="//"
sed -i \
	-e "/^.*#define INITTAB/s@.*@$nt#define INITTAB \"$inittab\"@" \
	-e "/^.*#define INITDIR/s@.*@$nd#define INITDIR \"$initdir\"@" \
	-e "/#define LOGDIR/s#\".*#\"$logdir\"#" \
	-e "/#define INITCTL/s#\".*#\"$initctl\"#" \
	config.h

sed -i \
	-e "/#define CGBASE/s#\".*#\"$cgdir\"#" \
	runcap.c

echo "Configuration updated. Check the values below, then run make."
echo
test -n "$arch" && \
echo "	ARCH=$arch"
echo "	CC=$CC"
echo "	CFLAGS=$CFLAGS"
echo "	LDFLAGS=$LDFLAGS"
echo "	LIBS=$LIBS"
echo
echo "	initblocks: $blocks"
echo
echo "	inittab location: $inittab"
echo "	initdir location: $initdir"
echo "	control socket name: $initctl"
echo "	logdir location: $logdir"
echo "	cgroups mount path: $cgdir"
echo
echo "	binaries path: $sbindir"
echo "	executable names: ${s}init ${s}telinit ${s}runcap"
echo "	man section 5 path: $man5dir"
echo "	man section 8 path: $man8dir"
echo
