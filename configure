#!/bin/sh

# This script is indended to provide GNU autoconf compatible behavior.
# Do not rely too much on it. If unsure, go edit Makefile and/or config.h

# Unlike actualy autoconf scripts, this script does not test anything.
# Testing makes little sense for a small, very linux-specific tool
# like sninit which has no way of handling unusual evironments.

unset prefix sbindir mandir man5dir man8dir sysconfdir

# configure uses lower-case variables to store "kinda-default" values
# while resp. upper-case variables are used for unconditional overrides
unset cc ar as cflags asflags ldflags
unset hostcc hostcflags

unset target build host diet
unset cctype libc 
unset libs libs_syscall
unset tstype null

optimize=auto
unset nommu lto debug depend builtin quiet devmode
unset initctl inittab run s cgbase logdir blocks run

warn() { echo "$@" >&2; }
die() { echo "$@" >&2; exit 1; }
dieifnot() { test -n "$1" && return; shift; die "$@"; }
argreq() { dieifnot "$val" "$arg: value must be supplied"; }

usage() {
cat <<END
Usage: ./configure [options]

Options take either "key" or "key=val" forms.
For compatibility, --key=val and --with-key=val are accepted in most cases.

Installation directories:
	prefix=		overall prefix []
	sbindir=	system binaries directory [\$prefix/sbin]
	sysconfdir=	system configuration directory [\$prefix/etc]
	mandir=		man pages directory [\$prefix/share/man]

Runtime paths configuration:
	initctl=	init control socket [@initctl]
	inittab=	inittab [\$sysconfdir/inittab]
	initdir=	initdir [\$sysconfdir/initdir]

	disable-initdir	build init without initdir support
	disable-inittab	build init without any kind of runtime configuration

Target configuration:
	target=A	use \$A toolchain; in particular, use \$A-gcc
	build=B		use \$B toolchain for build-time executable
			(build= is only useful with builtin=)
	CC=		C compiler [gcc]
	AS=		assembler [gcc -c]
	AR=		archiver [ar]
			(as and ar are only used for bundled libc)

	nommu		enable tweaks for non-MMU targets (uClinux)

	lto		use link-time optimization (GCC only)
	debug		generate debug symbols
	depend		generate dependencies using \$CC -MD

	devel		disable optimization, generate debug symbols and dependencies,
			set inittab=etc/inittab and initdir=etc/initdir
			for testing and/or development

	qemu=A		use qemu-A to run tests

	quiet		do not print config summary to stdout

Libc selection (see INSTALL for explaination):
	arch=L		use bundled libc for target arch \$L
			possible L values: arm mips x86 x86_64 x86_32
	syslibc		use whatever libc target toolchain was configured with
	dietlibc	build with dietlibc (cc="diet gcc")
	musl		build with musl (cc="musl-gcc")

Init features:
	builtin=F	parse and compile \$F as built-in inittab
			(see doc/builtin.txt)

	tz		put localtime stamps in syslog messages
	utc		put utc timestamps in syslog messages
	nots		do not put any timestamps, rely on syslogd to add them

If not sure about configure usage, check comments in config.mk and config.h,
then edit those files directly.
END
exit 0
}

while [ $# -gt 0 ]; do
	arg="$1"; shift;
	# Separate LHS and RHS in --option=value or VAR=val cases
	case "$arg" in
		*=*)
			val=`echo "$arg" | sed -e 's/^[^=]*=//'`
			arg=`echo "$arg" | sed -e 's/=.*//'`
			;;
		*)
			val="" ;;
	esac

	# Now the arguments. We're aiming at being moderately autoconf-compatible,
	# so "--with-dietlibc" is allowed along with much more logical "dietlibc"
	# There will be some "extra" options like "with-dietlibc" but that's ok.
	#
	# Different name to produce correct error messages,
	# i.e. --foo not foo where --foo was used.

	arq=`echo "$arg" | sed -e 's/^--//'`

	case "$arq" in
		help) usage ;;

		sysconfdir|configdir) sysconfdir=$val ;;
		sbindir) sbindir=$val ;;
		mandir) mandir=$val ;;
		man5dir) mandir=$val ;;
		man8dir) mandir=$val ;;
		prefix) prefix=$val ;;
		logdir) logdir=$val ;;
		cgbase) cgbase=$val ;;
		exec-prefix) ;;

		program-prefix) s=$val ;;
		with-s|s) s=s ;;
		with-sn|sn) s=sn ;;

		initctl) argreq
			initctl=$val
			;;
		inittab)
			inittab=${val:--}
			;;
		initdir)
			initdir=${val:--}
			;;
		builtin|with-builtin)
			builtin="$val"
			;;
		target|host) argreq
			target=$val
			cross=$target-
			;;
		build) argreq
			build=$val
			hostcc=$val-gcc
			;;
		with-cc|cc)
			cc=${val:-cc}
			;;
		with-as|as) argreq
			as=$val
			;;
		with-ar|ar) argreq
			ar=$val
			;;
		with-gcc|gcc)
			cc=${val:-gcc}
			cctype=gcc
			;;
		with-clang|clang)
			cc=${val:-clang}
			cctype=clang
			;;
		with-hostcc|hostcc) argreq
			hostcc="$val"
			;;
		cflags|asflags|hostcflags|ldflags)
			eval "$arq='$val'"
			;;
		bundled|with-bundled|with-bundled-libc)
			libc=bundled
			;;
		arch) argreq
			libc=bundled
			arch="$val"
			;;
		with-musl|musl)
			cctype=musl
			libc=musl
			;;
		with-dietlibc|dietlibc) argreq
			diet=${val:-diet}
			libc=dietlibc
			;;
		with-dietlibc-fixed|dietlibc-fixed)
			# fixed = with ppoll(2) support
			diet=${val:-diet}
			libc=dietlibc-fixed
			;;
		with-libc|libc)
			libc=${val:-syslibc}
			;;
		with-syslibc|with-glibc|syslibc|glibc|libc|uclibc)
			libc=syslibc
			;;
		with-timestamps|ts) argreq
			tstype=$val
			;;
		tz|notz|libcts|nots)
			tstype=$arq
			;;
		disable-inittab|no-inittab)
			inittab=-
			;;
		disable-initdir|no-initdir)
			initdir=-
			;;
		enable-debug|debug)
			debug=${val:-"-Wall -g"}
			;;
		enable-lto|lto)
			lto=${val:-"-flto"}
			;;
		disable-optimization|no-O)
			optimize=
			lto=
			;;
		with-optimization|O|optimize)
			optimize=${val:-$optimize}
			;;
		with-mmu|mmu)
			nommu=
			;;
		without-mmu|nommu)
			nommu=1
			;;
		depend)
			depend=${val:--MD}
			;;
		devel)
			s=
			inittab=etc/inittab
			initdir=etc/initdir
			logdir=var/log
			optimize=
			debug="-Wall -g"
			depend="-MD"
			devmode=1
			;;
		quiet)
			quiet=1
			;;
		run) argreq
			run="$val"
			;;
		qemu)
			test -n "$val" && run="qemu-$val" || run="auto"
			;;
		with-*|without-*|enable-*|disable-*)
			# autoconf compatibility; buildroot supplies a lot of generic options
			# to configure, expecting unsupported ones to be ignored
			warn "Warning: unused option $arg"
			;;
		CC|AR|AS|HOSTCC|RUN) argreq
			eval "$arq='$val'"
			;;
		CFLAGS|ASFLAGS|LDFLAGS|LIBS)
			eval "$arq='$val'"
			;;
		*)
			die "Unknown option $arg"
			;;
	esac
done

# The following could be done in the loop above, if not for option order issues.
# i.e. --with-clang --with-dietlibc vs --with-dietlibc --with-clang

# Decide which cc to use
case "$cc:${cctype:-gcc}" in
	# gcc handles target with prefixed executables, like arm-linux-eabi-gcc
	:gcc)	cc=${cross}gcc ;;
	:cc)	cc=${cross}cc ;;
	# clang makes no difference between native and cross-compilation, and only needs
	# an option to select desired arch.
	:clang)	cc=clang; test -n "$target" && cc="$cc -arch $target" ;;
	# Unlike dietlibc, musl replaces compiler.
	# No idea how they handle cross-builds, perhaps with different musl-executables?
	:musl)	cc=musl-gcc
		test -n "$target" && die -e "Can't use --target with musl\n"\
			"Use --with-musl=ARCH-musl-gcc or something similar instead."
		;;
esac

# Decide which as and ar to use
ar=${ar:-${cross}ar}
as=${as:-\$(CC) -c}	# this will go straight into Makefile

# Try to guess target architecture
# This should be done *after* deciding $CC of course
ccarch=`${CC:-$cc} -dumpmachine 2>/dev/null`
test -z "$ccarch" -a -n "$target" && ccarch="$target"

# GCC has a bad habit of skipping libgcc with -nostdlib,
# which must be accounted for.
ccver=`${CC:-$cc} --version 2>/dev/null | head -1`
case "$cctype:$ccver" in
	:*GCC*|:*gcc*) cctype=gcc ;;
esac

# Check if we're trying to build x86 on an x86_64 host
case "$arch:$ccarch" in
	x86:x86_64*)
		cc="$cc -m32 -march=i686"
		;;
	x86_32:x86_64*)
		cc="$cc -mx32"
		;;
esac

# See if we'd like to use bundled libc by default,
# and try to guess arch if bundled was specified without an arg
if [ -z "$libc" -o "$libc" == 'bundled' ]; then
	case "$arch:$ccarch" in
		:x86_64*) arch=x86_64 ;;
		# x86_32 is *not* reported as such and must be specified explicitly!
		:x86*) arch=x86 ;;
		:arm*) arch=arm ;;
		:mips64*) ;;
		:mips*) arch=mips ;;
	esac
fi; if [ "$libc" == 'bundled' -a -z "$arch" ]; then
	die "Can't guess target architecture, use arch= option"
elif [ -z "$libc" -a -n "$arch" ]; then
	libc=bundled
fi

# Handle optimization
if [ "$optimize" == 'auto' ]; then
	optcommon="-Os -fno-asynchronous-unwind-tables"
	case "$ccarch" in
		# stdarg + x86 + SSE results in xmm* register handling bloat
		# despite the fact those are never used in sninit
		x86*) optimize="$optcommon -mno-sse" ;;
		# without any better ideas, just optimize for size
		*) optimize="$optcommon" ;;
	esac
fi

# Join parts of CFLAGS into a single variable
if [ -n "$optimize" ]; then
	cflags=${cflags:+$cflags }$optimize
fi
if [ -n "$lto" ]; then
	cflags=${cflags:+$cflags }$lto
	ldflags=${ldflags:+$ldflags }$lto
fi
if [ -n "$debug" ]; then
	cflags=${cflags:+$cflags }$debug
	asflags=${asflags:+$asflags }-g
fi
if [ -n "$depend" ]; then
	cflags=${cflags:+$cflags }$depend
fi

# Check which blocks init needs

if [ "$inittab" != "-" ]; then
	blocks="conf"
else
	blocks="null"
fi

case "${libc:-syslibc}" in
	bundled)
		dieifnot "$arch" "Target architecture must be specified for bundled libc (--arch)"
		test -d "libc/$arch" || die "bundled libc: target $arch is not supported"
		blocks="$blocks sys"
		tsdefault=tz
		test "$cctype" == "gcc" && libs=-lgcc
		;;
	musl)
		tsdefault=libc
		;;
	syslibc)
		blocks="$blocks dents"
		tsdefault=libc
		;;
	dietlibc-fixed)
		CC="$diet $cc"
		blocks="$blocks sys"
		tsdefault=tz
		;;
	dietlibc)
		CC="$diet $cc"
		libs=-lcompat
		blocks="$blocks sys ppoll"
		tsdefault=tz
		;;
	*)
		die "Unknown libc type $libc"
		;;
esac

case "${tstype:-$tsdefault}" in
	libc)
		blocks="$blocks libcts"
		;;
	null)
		blocks="$blocks nots"
		;;
	tz)
		blocks="$blocks tz"
		;;
	notz|utc)
		blocks="$blocks notz"
		;;
esac

# Try to guess which qemu to use if this was requested
if [ "$run" == 'auto' ]; then
	cclead=`echo "$ccarch" | sed -e 's/-.*//' -e 's/[^A-Za-z0-9_-]//'`
	if [ -z "$cclead" -a -n "$target" ]; then
		cclead=`echo "$target" | sed -e 's/-.*//'`
	fi
	qemu="qemu-$cclead"
	if "$qemu" -version >& /dev/null; then
		run="$qemu"
	elif [ -n "$cclead" ]; then
		die "Can't find qemu for $cclead"
	else
		die "Can't guess target architecture for qemu"
	fi
fi

# Allow complete overwriting for these variables
CC=${CC:-$cc}
AS=${AS:-$as}
AR=${AR:-$ar}
CFLAGS=${CFLAGS:-$cflags}
ASFLAGS=${ASFLAGS:-$asflags}
LDFLAGS=${LDFLAGS:-$ldflags}
LIBS=${LIBS:-$libs}
HOSTCC=${HOSTCC:-$hostcc}
RUN=${RUN:-$run}

# Default values for directory options, defined late because of $prefix dependency
subprefix=${prefix:-/usr}
prefix=${prefix:-/}
test "$prefix" = '/' && prefix=''
mandir=${mandir:-$subprefix/share/man}
man5dir=${man5dir:-$mandir/man5}
man8dir=${man8dir:-$mandir/man8}
sbindir=${sbindir:-$prefix/sbin}
cgbase=${cgbase:-/sys/fs/cgroup}
logdir=${logdir:-/var/log}
sysconfdir=${sysconfdir:-$prefix/etc}
initctl=${initctl:-@initctl}
test "$inittab" != '-' && inittab=${inittab:-$sysconfdir/inittab} || unset inittab
test "$initdir" != '-' && initdir=${initdir:-$sysconfdir/rc}      || unset initdir

sed -i \
	-e "/^ARCH :=/s#:=.*#:= $arch#"\
	-e "/^CC :=/s#:=.*#:= $CC#"\
	-e "/^AS :=/s#:=.*#:= $AS#"\
	-e "/^AR :=/s#:=.*#:= $AR#"\
	-e "/^CFLAGS :=/s#:=.*#:= $CFLAGS#"\
	-e "/^ASFLAGS :=/s#:=.*#:= $ASFLAGS#"\
	-e "/^LDFLAGS :=/s#:=.*#:= $LDFLAGS#"\
	-e "/^LIBS :=/s#:=.*#:= $LIBS#"\
	-e "/^builtin :=/s#:=.*#:= $builtin#"\
	-e "/^HOSTCC :=/s#:=.*#:= $HOSTCC#"\
	-e "/^RUN :=/s#:=.*#:= $RUN#"\
	-e "/^s :=/s#:=.*#:= $s#"\
	-e "/^initblocks :=/s#:=.*#:= $blocks#"\
	config.mk

unset nt; test -z "$inittab" && nt="//"
unset nd; test -z "$initdir" && nd="//"
unset mm; test -z "$nommu" && mm="//"
unset dm; test -z "$devmode" && dm="//"
sed -i \
	-e "/^.*#define INITTAB/s@.*@$nt#define INITTAB \"$inittab\"@" \
	-e "/^.*#define INITDIR/s@.*@$nd#define INITDIR \"$initdir\"@" \
	-e "/#define INITCTL/s#\".*#\"$initctl\"#" \
	-e "/^.*#define NOMMU/s@.*#define@$mm#define@" \
	-e "/^.*#define DEVMODE/s@.*#define@$dm#define@" \
	config.h

sed -i \
	-e "/#define CGBASE/s#\".*#\"$cgbase\"#" \
	-e "/#define LOGDIR/s#\".*#\"$logdir\"#" \
	run.h

test -n "$quiet" && exit

echo "Configuration updated. Check the values below, then run make."
echo
test -n "$arch" && \
 echo "	ARCH=$arch"
echo "	CC=$CC"
test -n "$arch" -a "$AS" != "\$(CC) -c" && \
 echo "	AS=$AS"
echo "	CFLAGS=$CFLAGS"
test -n "$arch" -a "$AS" != "\$(CC) -c" && \
 echo "	ASFLAGS=$ASFLAGS"
echo "	LDFLAGS=$LDFLAGS"
echo "	LIBS=$LIBS"
test -n "$RUN" && \
 echo "	RUN=$RUN"
echo
echo "	initblocks: $blocks"
echo
echo "	inittab location: $inittab"
echo "	initdir location: $initdir"
echo "	control socket name: $initctl"
echo
echo "	cgroups path: $cgbase"
echo "	log path: $logdir"
echo
echo "	binaries path: $sbindir"
echo "	executable names: ${s}init ${s}telinit ${s}run"
echo "	man section 5 path: $man5dir"
echo "	man section 8 path: $man8dir"
echo
