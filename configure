#!/bin/sh

# This script is indended to provide GNU autoconf compatible behavior.
# Do not rely too much on it. If unsure, go edit Makefile and/or config.h

# Unlike actualy autoconf scripts, this script does not test anything.
# Testing makes little sense for a small, very linux-specific tool
# like sninit which has no way of handling unusual evironments.

unset target diet cc
unset cctype libc 
unset libs libs_syscall
unset tstype null

lto=
optimize=-Os
debug=
builtin=
hostcc=gcc

unset prefix sbindir mandir man5dir man8dir logdir sysconfdir
unset initctl inittab runcap s cgdir

die() { echo "$@"; exit 1; }
dieifnot() { test -n "$1" && return; shift; die "$@"; }

while [ $# -gt 0 ]; do
	arg="$1"; shift;
	# Separate LHS and RHS in --option=value or VAR=val cases
	case "$arg" in
		*=*)
			val=`echo "$arg" | sed -e 's/^[^=]*=//'`
			arg=`echo "$arg" | sed -e 's/=.*//'`
			;;
		*)
			val="" ;;
	esac
	# Now the arguments. We're aiming at being moderately autoconf-compatible,
	# so it's ./configure --with-dietlibc instead of much more logical in this case
	# ./configure dietlibc
	case "$arg" in
		--sysconfdir|--configdir) sysconfdir=$val ;;
		--sbindir) sbindir=$val ;;
		--logdir) logdir=$val ;;
		--mandir) mandir=$val ;;
		--man5dir) mandir=$val ;;
		--man8dir) mandir=$val ;;
		--prefix) prefix=$val ;;
		--cgdir) cgdir=$val ;;

		--program-prefix) s=$val ;;
		--with-s) s=s ;;
		--with-sn) s=sn ;;

		--initctl)
			dieifnot "$val" "$arg: value must be supplied"
			initctl=$val
			;;
		--inittab)
			dieifnot "$val" "$arg: value must be supplied"
			inittab=$val
			;;
		--initdir)
			dieifnot "$val" "$arg: value must be supplied"
			initdir=$val
			;;
		--builtin|--with-builtin)
			dieifnot "$val" "$arg: value must be supplied"
			builtin="$val"
			;;
		--target|--host)
			dieifnot "$val" "$arg: value must be supplied"
			target=$val
			cross=$target-
			;;
		--build)
			dieifnot "$val" "$arg: value must be supplied"
			build=$val
			hostcc=$val-gcc
			;;
		--arch)
			dieifnot "$val" "$arg: value must be supplied"
			arch="$val"
			;;
		--with-cc)
			cc=$val
			;;
		--with-clang)
			cc=$val
			cctype=clang
			;;
		--with-bundled|--with-bundled-libc)
			libc=bundled
			test -n "$val" && arch="$val"
			;;
		--with-musl)
			cctype=musl
			;;
		--with-dietlibc)
			diet=${val:-diet}
			libc=dietlibc
			;;
		--with-dietlibc-fixed)
			# fixed = with ppoll(2) support
			diet=${val:-diet}
			libc=dietlibc-fixed
			;;
		--with-libc|libc)
			libc=${val:-syslibc}
			;;
		--with-syslibc|--with-glibc|syslibc|libc)
			libc=syslibc
			;;
		--with-timestamps)
			dieifnot "$val" "$arg: argument required"
			tstype=$val
			;;
		--disable-inittab)
			inittab=-
			;;
		--disable-initdir)
			initdir=-
			;;
		--enable-debug)
			debug=${val:-"-Wall -g"}
			;;
		--enable-lto)
			lto=${val:-"-flto"}
			;;
		--disable-optimization)
			optimize=
			lto=
			;;
		--with-optimization)
			optimize=${val:-$optimize}
			;;
		--test)
			s=
			inittab=etc/inittab
			initdir=etc/initdir
			optimize=
			debug="-Wall -g"
			;;
		[A-Z]*)
			eval $arg=$val
			;;
		*)
			die "Unknown option $arg"
			;;
	esac
done

# Could be done in the loop above, if not for option order issues.
# i.e. --with-clang --with-dietlibc vs --with-dietlibc --with-clang

if [ -n "$optimize" ]; then
	cflags=${cflags:+$cflags }$optimize
fi
if [ -n "$lto" ]; then
	cflags=${cflags:+$cflags }$lto
	ldflags=${ldflags:+$ldflags }$lto
fi
if [ -n "$debug" ]; then
	cflags=${cflags:+$cflags }$debug
fi

test "$target" = "$build" || HOSTCC=${HOSTCC:-$hostcc}

case "${cctype:-gcc}" in
	# gcc handles target with prefixed executables, like arm-linux-eabi-gcc
	gcc)	CC=${cc:-${cross}gcc} ;;
	cc)	CC=${cc:-${cross}cc} ;;
	# clang makes no difference between native and cross-compilation, and only needs
	# an option to select desired arch.
	clang)
		CC=${cc:-clang}
		# this is sninit-specific, so should not be expected in the environment
		cflags=${cflags:+$cflags }-Wno-empty-body
		[ -n "$target" ] && cflags="-arch $target $cflags"
		;;
	# Unlike dietlibc, musl replaces compiler.
	# No idea how they handle cross-builds, perhaps with different musl-executables?
	musl)
		CC=${cc:-musl-gcc}
		[ -n "$target" ] && die -e "Can't use --host/--target with musl\n"\
			"Use --with-musl=ARCH-musl-gcc or something similar instead."
		;;
esac

# Check if we're trying to build x86 on an x86_64 host
# It's a blind test but that's ok since unrecognized option
# message is not likely to start with x86_64
#
# XXX: it's a dirty hack that should be done differently
if [ "$arch" == "x86" -a -z "$target" -a -z "$cc" ]; then
	ccarch=`$CC -dumpmachine 2>/dev/null`
	case "$ccarch" in
		x86_64*)
			CC="$CC -m32 -march=i686"
			test -z "$HOSTCC" && HOSTCC="$hostcc"
			;;
	esac
fi

unset sysi syst
case "${libc:-syslibc}" in
	bundled)
		dieifnot "$arch" "Target architecture must be specified for bundled libc (--arch)"
		test -d "libc/$arch" || die "bundled libc: target $arch is not supported"
		sysi="sys_printf.o sys_err_init.o"
		syst="sys_err_telinit.o"
		sysr="sys_err_runcap.o sys_execvp.o"
		libs="libc.a -lgcc"
		tsdefault=tz
		;;
	musl)
		tsdefault=libc
		;;
	syslibc)
		sysi="sys_getdents.o"
		tsdefault=libc
		;;
	dietlibc-fixed)
		CC="$diet $CC"
		sysi="sys_printf.o sys_err_init.o"
		syst="sys_err_telinit.o"
		sysr="sys_err_runcap.o sys_execvp.o"
		libs_syscall="-lcompat"
		tsdefault=tz
		;;
	dietlibc)
		CC="$diet $CC"
		libs=-lcompat
		sysi="sys_ppoll.o sys_printf.o sys_err_init.o"
		syst="sys_err_telinit.o"
		sysr="sys_err_runcap.o sys_execvp.o"
		tsdefault=tz
		;;
	*)
		die "Unknown libc type $libc"
		;;
esac

case "${tstype:-$tsdefault}" in
	libc)
		sysi="${sysi:+$sysi }sys_time_libc.o"
		;;
	null)
		sysi="${sysi:+$sysi }sys_time_null.o"
		;;
	tz)
		sysi="${sysi:+$sysi }sys_time_tz.o sys_timestamp.o"
		;;
	notz|utc)
		sysi="${sysi:+$sysi }sys_time_notz.o sys_timestamp.o"
		;;
esac

# Allow complete overwriting for these variables
CFLAGS=${CFLAGS:-$cflags}
LDFLAGS=${LDFLAGS:-$ldflags}
LIBS=${LIBS:-$libs}

# Default values for directory options, defined late because of $prefix dependency
subprefix=${prefix:-/usr}
prefix=${prefix:-/}
test "$prefix" = '/' && prefix=''
mandir=${mandir:-$subprefix/share/man}
man5dir=${man5dir:-$mandir/man5}
man8dir=${man8dir:-$mandir/man8}
sbindir=${sbindir:-$prefix/sbin}
logdir=${logdir:-$prefix/var/log}
cgdir=${cgdir:-/sys/fs/cgroup}
sysconfdir=${sysconfdir:-$prefix/etc}
initctl=${initctl:-@initctl}
test "$inittab" != '-' && inittab=${inittab:-$sysconfdir/inittab} || unset inittab
test "$initdir" != '-' && initdir=${initdir:-$sysconfdir/rc}      || unset initdir

unset nc nn; test -z "$inittab" && nc='#' || nn='#'
sed -i \
	-e "/^ARCH =/s#=.#= $arch#"\
	-e "/^CC =/s#=.*#= $CC#"\
	-e "/^CFLAGS =/s#=.*#= $CFLAGS#"\
	-e "/^LDFLAGS =/s#=.*#= $LDFLAGS#"\
	-e "/^LIBS =/s#=.*#= $LIBS#"\
	-e "/^LIBS_syscall =/s#=.*#= $libs_syscall#"\
	-e "/^SYS_init =/s#=.*#= $sysi#"\
	-e "/^SYS_telinit =/s#=.*#= $syst#"\
	-e "/^SYS_runcap =/s#=.*#= $sysr#"\
	-e "/^builtin =/s#=.*#= $builtin#"\
	-e "/^HOSTCC =/s#=.*#= $HOSTCC#"\
	-e "/^s =/s#=.*#= $s#"\
	-e "/^#\?init: init_conf/s/^#\?/${nc}/"\
	-e "/^#\?init: init_null/s/^#\?/${nn}/"\
	Makefile

unset nd; test -z "$initdir" && nd="//"
sed -i \
	-e "/#define INITTAB/s#\".*#\"$inittab\"#" \
	-e "/#define LOGDIR/s#\".*#\"$logdir\"#" \
	-e "/#define INITCTL/s#\".*#\"$initctl\"#" \
	-e "/^.*#define INITDIR/s@.*@$nd#define INITDIR \"$initdir\"@" \
	config.h

sed -i \
	-e "/#define CGBASE/s#\".*#\"$cgdir\"#" \
	runcap.c

echo "Configuration updated. Check the values below, then run make."
echo
echo "	CC=$CC"
echo "	CFLAGS=$CFLAGS"
echo "	LDFLAGS=$LDFLAGS"
echo "	LIBS=$LIBS"
echo
echo "	inittab location: $inittab"
echo "	initdir location: $initdir"
echo "	control socket name: $initctl"
echo "	logdir location: $logdir"
echo "	cgroups mount path: $cgdir"
echo
echo "	binaries path: $sbindir"
echo "	executable names: ${s}init ${s}telinit ${s}runcap"
echo "	man section 5 path: $man5dir"
echo "	man section 8 path: $man8dir"
echo
