Overview
~~~~~~~~
sninit is a small init implementation for linux.

sninit was written as a smaller, cleaner replacement for sysvinit,
fixing sysvinit's inability to stop/start services on the fly,
and turning runlevels into something usable.

To a lesser degree, it was also a response to a horrific,
overbloated beast called systemd making its way into Arch linux.

It is meant for systems that need something more capable than busybox
init and more reliable than sysvinit+initscripts.


Features
~~~~~~~~
Key things sninit has:

+ Runlevels for process management
+ Starting/stopping individual processes manually
  "telinit stop httpd" and so on
+ Sleep/suspend/hibernate as runlevels
+ Support for initdirs (one file per process),
  in addition to sysvinit inittab (one line per process)
+ Small size and static linkage
+ Simplified memory management;
  no malloc, memory allocation only while reconfiguring

Things sninit lacks:

- built-in system state management (network/mounts/sysconfig/ulimits)
- inter-process dependencies, systemd-style
- support for kernels other than linux-2.6+
- dbus, xml and other bloat
- wall(8), shutdown(8) and some other sysvinit-style utilities
- in-place restarting a-la sysvinit

Things sninit has which are not in any way exceptional:

* parallel startups
  (busybox init allows it, never mind sysvinit)


What is init
~~~~~~~~~~~~
init is process 1 in Linux and other Unix-like systems.

Upon booting itself, kernel only starts one process, typically /sbin/init.
This process is expected to initialize the system and start everything else,
including user interface.
This process is not expected to exit; in case it does, kernel panics.

Init starts several processes in sequence, waiting for them
to finish, mounting filesystems, initializing devices and so on.
Once the system is ready, daemon-like processes are spawned;
when such process dies, it is respawned.

Daemon-like processes usually include getty (with login as a subprocess),
xinit or X display manager, as well as actual daemons in foreground mode.


Building sninit
~~~~~~~~~~~~~~~
For proper build instructions, see INSTALL file.

To try sninit without configuring a VM or installing anything:

	./configure devel
	make all sbin
	./init
	(from another terminal)
	./telinit list
	./telinit stop srv1
	./telinit sleep
	./telinit reload
	./telinit poweroff

In this configuration, init uses ./etc/inittab, ./etc/initdir
and stub executables from ./sbin.


Documentation
~~~~~~~~~~~~~
See man pages and files in doc/ directory.


Just how small exactly?
~~~~~~~~~~~~~~~~~~~~~~~
Statically linked init executable is around 15KB on x86_64 and arm,
25KB on mips. telinit, which is a standalone executable, adds
3KB (x86_64 and arm) to 8KB (mips) more.


Credits
~~~~~~~
sninit draws ideas from busybox init, minit and the original sysvinit.

"No-malloc" approach to memory management was inspired by rockbox,
though in rockbox itself it was done in a different way.

Small size and static linkage are mostly due to dietlibc and busybox.
(see "Writing Small and Fast Software" by F. von Leitner).


Licensing
~~~~~~~~~
GPLv3, see COPYING file.


Author
~~~~~~
Alex Suykov <alex.suykov@gmail.com>
