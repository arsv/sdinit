Generic instructions
~~~~~~~~~~~~~~~~~~~~
Build sequence is similar to generic autotools packages:

	./configure (...)
	make
	make DESTDIR=(...) install

Run "./configure help" to see possible options.

Alternatively, check config.mk and/or config.h.
Specifically, check INITCTL, INITTAB, LOGDIR in config.h,
compiler setup and installation directories in config.mk.


Cross-compiling
~~~~~~~~~~~~~~~
Set CC and AR in config.mk for your target architecture.
Alternatively, run configure --target=(toolchain-prefix).

sninit follows Linux kernel naming scheme, with CC for target executables
and HOSTCC for build system executables.


Packaging for small size
~~~~~~~~~~~~~~~~~~~~~~~~
Simple make install does not strip executables.
If you need stripped executable, run this instead:

	make DESTDIR=(...) install-stripped

If you don't need man pages as well, use

	make DESTDIR=(...) install-bin-stripped


Which libc to use
~~~~~~~~~~~~~~~~~
In most cases sninit should be built with dietlibc.

sninit does not need dynamic libc, and will not benefit from using one.
The smallest sninit executable is the one linked statically against dietlibc.

sninit also does not need anything other than basic syscalls and a handful
of bog-standard string manipulation function from libc.
It will not benefit from using anything fancier than dietlibc.

Settings for other libc-s are only provided for completeness,
for testing, and for unusual cases not considered here.


Building with bundled libc
~~~~~~~~~~~~~~~~~~~~~~~~~~
sninit comes with a stripped-down, minimalistic subset of dietlibc
capable just enough to fit sninit demands.
Sample usage (cross-build for mips):

	ARCH = mips
	CC = mipsel-linux-gnu-gcc -march=mips2

CC will be called with -nostdinc -nostdlib so it does not matter
which libc, if any, it has in its sysroot.

Check libc/ subdirectories to see which architectures are supported
by bundled libc. For unsupported architectures, fall back to dietlibc
or perhaps system libc.

Using bundled libc may be more convenient, but provides little benefit
over *properly*configured* dietlibc in terms of executable size
(because it is mostly dietlibc, if perhaps re-written in some places).
Instead gives clear, uncluttered libc code for debugging.

Note properly configured dietlibc. Depending on target architecture,
default dietlibc configuration may add several kB of bloat.
See doc/dietlibc.txt


Building with dietlibc
~~~~~~~~~~~~~~~~~~~~~~
Recommended settings:
	CC = diet gcc
or
	CC = diet clang

Dietlibc up to and including 0.33 does not provide ppoll(2) system call.
Either use sys_ppoll.c (indirect syscall, via syscall(2)), or patch dietlibc.
Note syscall(2) is in libcompat.a, so you'll need
	LIBS = -lcompat

Because dietlibc implies static linkage and small executable size,
consider using sys_printf.c and sys_strerror.c. See comments in those files.
Size optimization (-Os) helps in most cases.


Building with musl
~~~~~~~~~~~~~~~~~~
Use CC = musl-gcc; no other settings should be necessary.

If musl-gcc complains about linux/*.h, you probably have no linux headers
in musl-gcc path. Symlink /usr/include/linux and /usr/include/asm to
$MUSL/include/linux and $MUSL/include/asm respectively.


Building with glibc or uClibc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Both glibc and uclibc lack getdents(2), even thought it is a linux system call.
Use sys_getdents.c instead.


Choosing timezone module
~~~~~~~~~~~~~~~~~~~~~~~~
This only makes sense with bundled libc or dietlibc, and only affects
the messages sent to syslog.

The standard (also default) option is "tz", but "notz" will work just
as well with most, if not all, syslogd implementations.

When building with bundled libc for a musl-based system, prefer "utc"
instead of "tz" because that's what musl syslog(3) uses.


Link-time optimization
~~~~~~~~~~~~~~~~~~~~~~
To enable LTO, add -flto to CFLAGS and LDFLAGS, or alternatively use "lto"
keyword for configure. It should work with any libc.

LTO is generally harmless, but it requires support from cc/binutils, and its
effects are usually minor. Because of this, it is not enabled by default.


Rebuilding
~~~~~~~~~~
Run "make archclean" before rebuilding with a different ARCH value
or with a different libc type. Those affect config.mk, and Makefile
does not track dependencies on config.mk

Regular "make clean" should be enough for any changes in config.h alone.

Use "make distclean" to remove all generated files including target executable.
Note however that config.h and config.mk are modified in place, there are no
autoconf-style config.h.in or config.mk.in, so distclean will not restore those.
