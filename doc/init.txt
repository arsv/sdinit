What is init?
~~~~~~~~~~~~~
Or in particular, what is the minimal features an application must have
to action as process 1. This is an important question when it comes to
minimalistic init implementations.

The answer is this:
  0. staying resident (not dying)
  1. (re)spawning child process/es
  2. reaping orphan zombies

These features follow from process spawning rules, and the special role
init (pid 1) has in the kernel:
  A. all processes except init must have a parent process
  B. init is the only one started by kernel
  C. init can not die
  D. orphans are re-assigned to init

In the most general case, #1 and #2 are optional. The result is however
a degenerate one-process system, with the init running idefinitely.
For most practical cases, the following limitations can be assumed to
be in place:
  E. init should never be the only process running
     for any arbitrary large time interval past boot
  F. any non-init process is allowed to die

Indeed, with #A-#F considered,
#0 follows from #C
#2 follows from #F + #D + #A
#1 follows from #E + #F + #A + #B


Common relaxations for #A-#F conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Both features #1 and #2 for pid 1 can be replaced with weaker ones
if some of conditions #A-#F are relaxed by introducing additional special
process(es) not allowed to die, in a form of uninterrupted lineage
starting from init.

The result can be called an "init cluster". Well-known example
is the minimun init, found for example here:
  http://git.2f30.org/sinit/
In this example, #1 is replaced by
  #1a. spawns a single child process not allowed to die
with said child process satisfying
  #0. not allowed to die, and
  #1. (re)spawning child processes

In the similar vein, it is possible to delegate orphan-reaping function
to a child process using prctl(PR_SET_CHILD_SUBREAPER).

The key point here is that pid 1 in this example is incomplete as init,
and it's only the whole two-process cluster that effectively implements
#0, #1 and #2 features under #A-#F conditions. 

Splitting init into two processes only changes its internal structure,
and does not affect its functions.


Hybrid solutions
~~~~~~~~~~~~~~~~
In the above sinit.c example, all children were delegated to a sub-init
process. Complete delegation is not mandatory however, it is possible
to have several sub-init processes each handling its own children.

It is also quite possible to make a hierarchy, allowing non-dying sub-init
control (possibly dying) respawner process which in turn would control
(possibly dying) children.

      [init]			<-- non-dying
       +- [sub-init]		<-- non-dying, respawns child
           +- respawner		<-- dying, respawns children
              +- child1
              +- child2
              +- ...

And since pretty much any init implementation with full #1 (respawning) support
can act as either sub-init or respawner, it is possible to nest inits.

Nesting has been widely used to extend less-capable top-level init
with a more capable respawner, without replacing the top-level init.

Examples: sysvinit+initscripts, sysvinit+runit, sinit.c+runit,
suckless init (sinit + shell scripts).

Of particular note here is sysvinit+initscripts bundle, which extended
quite capable sysvinit with what does not even qualify as a respawner.


Does nesting makes sense?
~~~~~~~~~~~~~~~~~~~~~~~~~
No. Complete init is a non-dying respawner, reaping is secondary to that.

Any sub-init properly implementing #1 will also do #2 well.
This is because re-spawning implies reaping, and #D means pid 1 will
reap all orphans.
Separating reaping into a separate process is pointless.

Writing complete init is not that difficult.
For generic systems, that is with #E and #F in place, there is little sense
in going with anything less capable.
