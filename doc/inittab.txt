The new inittab format
~~~~~~~~~~~~~~~~~~~~~~
Up to some point during development, sninit used sysvinit-style
inittab format ("sysvtab" for short):

	name:rlvls:action:command

Later on, the format has been changed to crontab-style "newtab":

	name	runflags    command

Note whitespace-separated fields, and runflags in place of rlvls
and action.


Why a new format?
~~~~~~~~~~~~~~~~~
Less ugly and better fitting sninit's internal representation.

The initial idea of sninit features called for a rather elaborate
per-entry configuration. Back then, having one field for runlevels
and another one for comma-separated list of value kinda made sense.

	httpd:2345:respawn,uid=apache,gid=apache:/sbin/httpd

As development progressed, some things became silent defaults and
other have been moved out of init (into run(8)), so a typical
respawning entry became
	
	httpd:::/sbin/runcap apache@apache /sbin/httpd

and one-time entries started to look like

	::wait:/sbin/whatever

so it made less and less sense to shoehorn it into sysvinit format,
pretty ugly to begin with.

Wherever things may be aligned, it's better to keep them aligned, so : were
replaced with whitespace separators. And since sninit had already crontab-style
environment variables, the whole thing started to look more like crontab.


Compatibility
~~~~~~~~~~~~~
sninit is not a drop-in replacement for sysvinit, and was not meant to be.
Switching from sysvinit to sninit requires rewriting inittab in any case,
so the idea of maintaining sysv-inittab compatibility has been rejected.


Field order
~~~~~~~~~~~
SysV-style field order (name-...-command) has been kept intact.
Command is the most variable part, so there is no other place to put it.
Between flags-name- and name-flags-, the latter has been chosen
to faciliate simple grep/sed operations on entry names:

	/^name\>/

Matching the 2nd field would require explicit pattern for the flags.


Entry flags
~~~~~~~~~~~
Sysvinit uses self-descriptive keywords for its action field,
and a separate mandatory field for runlevels:

	mount:12345:wait:/bin/mount -a

In sninit however has made runlevels optional, and treats action
a bit differently. This is because of the way sninit represents
this data internally.


Entry flags: actions
~~~~~~~~~~~~~~~~~~~~
Unlike sysvinit, action in sninit is a bitmask (flags field in struct initrec),
with individual bits having little relation to the action keywords in inittab.

The bits work well for the code, but having something close to the internal
representation in inittab turns out to be a bad idea: outside of the code,
the choice is non-obvious, and the need to combine bits leads either to a very
length field ("once,excl") or something barely readable ("ox").

So instead the decision was made to combine valid bit combinations into
sysv-style actions, and use one descriptive word for each action. This way,
it's "once" and "wait" even thought "wait" is two bits, O_ONCE | O_EXCL.


Entry flags: runlevels
~~~~~~~~~~~~~~~~~~~~~~
Real life observation: sysv initlevels are rarely used, and unusual uses
are nonexistant. Pretty much any modern system boots into runlevel 3,
and that's about it. Few make difference between 3 (text login) and 5 (X login).
Sometimes level 1 (single user mode) is implemented. Sometimes it's not.

Even with sninit's slippery levels, the situation does not change much.

In fact, the way slippery runlevels are hard-coded for sleep/suspend/hybernate
commands extends nicely into the other runlevels. It's pretty safe to assume
runlevel 1 is always a single-user mode, runlevel 3 is the normal system state
and so on.


Entry flags: actions and runlevels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There is a strong correlation between actions and runlevels tAhe entry runs on.
Regular deamons are typically 23456789, most wait and once commands are ~0,
syslog is 23456789 as well, gettys are likely 345 while X/xdm is 3 only.

This makes it convenient to include runlevels together with flags into the action
keyword, at least as a default setting.


Entry flags: initdir and services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
