The new inittab format
~~~~~~~~~~~~~~~~~~~~~~
Up to some point during development, sninit used sysvinit-style
inittab format ("sysvtab" for short):

	name:rlvls:flags:command

Later on, the format has been changed to crontab-style "newtab":

	name	runflags    command

Note whitespace-separated fields, and flags merged with runlevels.

In current implementation, the formats are essentially equivalent. 
SysV-style "wait" and "once" are replaced with "w" and "r" respectively,
rlvls field is used with no changes.


Why a new format?
~~~~~~~~~~~~~~~~~
Less ugly and better fitting sninit's internal representation.

The initial idea of sninit features called for a rather elaborate
per-entry configuration. Back then, having one field for runlevels
and another one for comma-separated list of value kinda made sense.

	httpd:2345:respawn,uid=apache,gid=apache:/sbin/httpd

As development progressed, this evolved into
	
	httpd:::/sbin/runcap apache@apache /sbin/httpd

while w-type entries started to look like

	::wait:/sbin/whatever

and it made less and less sense to shoehorn it into sysvinit format,
pretty ugly to begin with.

Wherever things may be aligned, it's better to keep them aligned, so : were
replaced with whitespace separators. And since sninit had already crontab-style
environment variables, the whole thing started to look more like crontab.

Atop of that, sninit was never a drop-in replacement for sysvinit,
and was not meant to be. So instead of somehow accepting somewhat compatible
configuration with a different semantics (that is, a sysv-style inittab),
the choice was made to reject it loudly.


Field order
~~~~~~~~~~~
SysV-style field order (name-...-command) has been kept intact.
Command is the most variable part, so there is no other place to put it.
Between flags-name- and name-flags-, the latter has been chosen
to faciliate simple grep/sed operations on entry names:

	/^name\>/

Matching the 2nd field would require explicit pattern for the flags.


Entry flags
~~~~~~~~~~~
Sysvinit uses self-descriptive keywords for its action field,
and a separate field for runlevels.

	mount:12345:wait:/bin/mount -a

In contrast, sninit has single-character flags mixed with
runlevel specification:

	mount	w*   /bin/mount -a

Experiments at writing inittabs for bootable systems have shown that
most of the time properly choosen defaults result in per-entry description
only one or two characters long (in newtab format), and among those actual
flags like r or w and runlevels like 0 or * take more or less equal roles.

To some extent, this is already showing in sysvinit format, with only 3 actions
out of 14 actually making use of runlevels field. Sysvinit has justification
for that, with its fixed-four-fields format. With sninit, it is not that simple
due to different internal representation, which heavily implies usable defaults
of some sort.

Another reason for choosing non-trivial defaults (i.e. something other than
flags=0 rlvls=0) is having flag-less service files in initdir.
Flag specification there remains ugly, and I see no way to improve
the situation, but with sane defaults there is (almost) no need to do that.
Incidentally, the choices made for initdir actually fit quite well in inittab.


List of flags
~~~~~~~~~~~~~
a	sub A
b	sub B
c	sub C
d	sub D
e	sub E
f	sub F
g
h	C_HUSH
i	C_ROFa
j	C_ROFa | C_ROFb
k	C_USEABRT
l
m	PRIMASK & ~SLIPPERY & ~SPECIAL
n	
o	
p	
q	C_DOF
r	C_ONCE
s	C_FAST	
t	C_DTF
u	C_ROFa
v	C_WAIT
w	C_WAIT | C_ONCE
x	P_MANUAL
y	
z	PRIMASK &  SLIPPERY & ~SPECIAL
